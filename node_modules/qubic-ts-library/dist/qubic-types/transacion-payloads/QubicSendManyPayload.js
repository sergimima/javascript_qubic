"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QubicTransferSendManyPayload = void 0;
const QubicPackageBuilder_1 = require("../../QubicPackageBuilder");
const DynamicPayload_1 = require("../DynamicPayload");
/**
 *
 * Transaction Payload to use Qutil/SendMany SC
 *
 * struct SendToManyV1_input {
 *   uint8_t addresses[25][32];
 *   int64_t amounts[25];
 * };
 *
 *
 *
 */
class QubicTransferSendManyPayload {
    constructor() {
        this._internalPackageSize = 1000; /* 25 * 32  + 25 * 8 */
    }
    addTransfer(transfer) {
        if (this.sendManyTransfers.length < 25) {
            this.sendManyTransfers.push(transfer);
        }
        else {
            throw new Error("max 25 send many transfers allowed");
        }
        return this;
    }
    addTranfers(transfers) {
        if (this.sendManyTransfers.length + transfers.length > 25) {
            throw new Error("max 25 send many transfers allowed");
        }
        transfers.forEach(transfer => {
            this.addTransfer(transfer);
        });
        return this;
    }
    getPackageSize() {
        return this._internalPackageSize;
    }
    getPackageData() {
        const builder = new QubicPackageBuilder_1.QubicPackageBuilder(this.getPackageSize());
        this.sendManyTransfers.forEach(transfer => {
            builder.add(transfer.destId);
        });
        this.sendManyTransfers.forEach(transfer => {
            builder.add(transfer.amount);
        });
        return builder.getData();
    }
    getTransactionPayload() {
        const payload = new DynamicPayload_1.DynamicPayload(this.getPackageSize());
        payload.setPayload(this.getPackageData());
        return payload;
    }
}
exports.QubicTransferSendManyPayload = QubicTransferSendManyPayload;
